const mongoose = require('mongoose');

// Configuration de la base de donn√©es
const MONGODB_URI = 'mongodb://admin:password123@mongodb:27017/idurar_erp_crm?authSource=admin';

// Mod√®les (simplifi√©s pour l'initialisation)
const AdminSchema = new mongoose.Schema({
  name: String,
  email: String,
  isActive: { type: Boolean, default: true },
  createdAt: { type: Date, default: Date.now }
});

const AdminPasswordSchema = new mongoose.Schema({
  admin: { type: mongoose.Schema.Types.ObjectId, ref: 'Admin' },
  password: String,
  createdAt: { type: Date, default: Date.now }
});

const Admin = mongoose.model('Admin', AdminSchema);
const AdminPassword = mongoose.model('AdminPassword', AdminPasswordSchema);

async function createAdminUser() {
  try {
    // Connexion √† MongoDB
    await mongoose.connect(MONGODB_URI);
    console.log('‚úÖ Connexion √† MongoDB r√©ussie');

    // V√©rifier si l'admin existe d√©j√†
    const existingAdmin = await Admin.findOne({ email: 'admin@admin.com' });
    if (existingAdmin) {
      console.log('‚ö†Ô∏è Utilisateur admin existe d√©j√†');
      return;
    }

    // Cr√©er l'utilisateur admin
    const admin = new Admin({
      name: 'Admin User',
      email: 'admin@admin.com',
      isActive: true
    });

    await admin.save();
    console.log('‚úÖ Utilisateur admin cr√©√©');

    // Cr√©er le mot de passe (hash simple pour le test)
    const bcrypt = require('bcrypt');
    const hashedPassword = await bcrypt.hash('admin123', 10);

    const adminPassword = new AdminPassword({
      admin: admin._id,
      password: hashedPassword
    });

    await adminPassword.save();
    console.log('‚úÖ Mot de passe admin cr√©√©');

    console.log('üéØ Utilisateur admin cr√©√© avec succ√®s !');
    console.log('üìß Email: admin@admin.com');
    console.log('üîë Password: admin123');

  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('üîå D√©connexion de MongoDB');
  }
}

createAdminUser();
