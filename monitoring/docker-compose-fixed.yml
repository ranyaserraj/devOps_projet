version: '3.8'

services:
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: idurar-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitoring

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: idurar-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - monitoring

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: idurar-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: idurar-cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    networks:
      - monitoring

  # Jenkins with Prometheus plugin - CORRIGÃ‰ pour utiliser le port 8080 comme master
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: idurar-jenkins-monitoring
    restart: unless-stopped
    ports:
      - "8080:8080"  # Port standard Jenkins
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ../:/workspace
      - ./jenkins-plugins.txt:/usr/share/jenkins/ref/plugins.txt
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Djenkins.model.Jenkins.buildsDir=/var/jenkins_home/jobs
      - JENKINS_OPTS=--httpPort=8080
      - JENKINS_PLUGINS_INSTALL=true
    networks:
      - monitoring

  # Jenkins Agent for heavy testing
  jenkins-agent:
    image: jenkins/inbound-agent:latest
    container_name: idurar-jenkins-agent
    restart: unless-stopped
    environment:
      - JENKINS_URL=http://jenkins:8080
      - JENKINS_SECRET=jenkins-secret
      - JENKINS_AGENT_NAME=heavy-test-agent
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ../:/workspace
    depends_on:
      - jenkins
    networks:
      - monitoring

  # Test Database for Jenkins
  jenkins-mongodb:
    image: mongo:7.0
    container_name: jenkins-mongodb
    restart: unless-stopped
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: jenkins
      MONGO_INITDB_ROOT_PASSWORD: jenkins123
      MONGO_INITDB_DATABASE: jenkins_test
    volumes:
      - jenkins_mongodb_data:/data/db
    networks:
      - monitoring

  # Alertmanager - Alert handling
  alertmanager:
    image: prom/alertmanager:latest
    container_name: idurar-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - monitoring

  # Jenkins Metrics Exporter
  jenkins-metrics-exporter:
    build:
      context: ./scripts
      dockerfile: Dockerfile
    container_name: idurar-jenkins-metrics-exporter
    restart: unless-stopped
    ports:
      - "9091:9091"
    environment:
      - JENKINS_URL=http://jenkins:8080
      - JENKINS_USER=admin
      - JENKINS_TOKEN=admin123
    depends_on:
      - jenkins
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  jenkins_data:
  jenkins_mongodb_data:
  alertmanager_data:

