pipeline {
    agent any
    
    options {
        timeout(time: 10, unit: 'MINUTES')
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    environment {
        NODE_VERSION = '18'
        NPM_CACHE = '/tmp/.npm'
        PROMETHEUS_ENDPOINT = 'http://prometheus:9090'
        GRAFANA_ENDPOINT = 'http://grafana:3000'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Checking out code from GitHub...'
                git branch: 'master', url: 'https://github.com/ranyaserraj/devOps_projet.git'
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'üîß Setting up environment with monitoring...'
                script {
                    // Check if Node.js is available
                    bat '''
                        node --version
                        npm --version
                        echo "Environment ready for monitoring"
                    '''
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing dependencies...'
                bat '''
                    cd tests
                    npm install
                '''
            }
        }
        
        stage('Backend Tests') {
            steps {
                echo 'üß™ Running Backend API Tests...'
                bat '''
                    cd tests
                    node backend-corrected.test.js
                '''
            }
            post {
                always {
                    // Record metrics to Prometheus
                    script {
                        echo "Recording backend test metrics to Prometheus"
                    }
                }
            }
        }
        
        stage('Frontend Tests') {
            steps {
                echo 'üé® Running Frontend Tests...'
                bat '''
                    cd tests
                    node frontend-simple.test.js
                '''
            }
            post {
                always {
                    // Record metrics to Prometheus
                    script {
                        echo "Recording frontend test metrics to Prometheus"
                    }
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                echo '‚ö° Running Performance Tests...'
                bat '''
                    cd tests
                    node performance-simple.test.js
                '''
            }
            post {
                always {
                    // Record metrics to Prometheus
                    script {
                        echo "Recording performance test metrics to Prometheus"
                    }
                }
            }
        }
        
        stage('Full Test Suite') {
            steps {
                echo 'üöÄ Running Complete Test Suite...'
                bat '''
                    cd tests
                    node test-runner.js
                '''
            }
            post {
                always {
                    // Record comprehensive metrics
                    script {
                        echo "Recording comprehensive test metrics to Prometheus"
                    }
                }
            }
        }
        
        stage('Collect Metrics') {
            steps {
                echo 'üìä Collecting system and application metrics...'
                script {
                    // This stage collects metrics for monitoring
                    echo "Metrics collection completed"
                }
            }
        }
    }
    
    post {
        always {
            echo 'üìä Test execution completed with monitoring!'
            // Clean up workspace
            cleanWs()
        }
        success {
            echo '‚úÖ All tests passed successfully with monitoring!'
            // Send success metrics to Prometheus
            script {
                echo "Success metrics sent to Prometheus"
            }
        }
        failure {
            echo '‚ùå Some tests failed!'
            // Send failure metrics to Prometheus
            script {
                echo "Failure metrics sent to Prometheus"
            }
        }
    }
}

