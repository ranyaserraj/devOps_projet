#!/bin/bash

echo "üìä Import du dashboard Grafana Live Docker Metrics"
echo "================================================"
echo ""

# V√©rifier que Grafana est accessible
echo "üîç V√©rification de l'acc√®s √† Grafana..."
if ! curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
    echo "‚ùå Grafana n'est pas accessible sur http://localhost:3000"
    echo "   Veuillez d√©marrer Grafana avec: docker-compose -f monitoring/docker-compose-grafana-non-optimized.yml up -d"
    exit 1
fi

echo "‚úÖ Grafana est accessible"
echo ""

# V√©rifier que cAdvisor est accessible
echo "üîç V√©rification de cAdvisor..."
if ! curl -s http://localhost:8080/metrics > /dev/null 2>&1; then
    echo "‚ùå cAdvisor n'est pas accessible sur http://localhost:8080"
    echo "   Veuillez d√©marrer cAdvisor avec: docker-compose -f monitoring/docker-compose-grafana-non-optimized.yml up -d"
    exit 1
fi

echo "‚úÖ cAdvisor est accessible"
echo ""

# V√©rifier que Prometheus est accessible
echo "üîç V√©rification de Prometheus..."
if ! curl -s http://localhost:9090/api/v1/query?query=up > /dev/null 2>&1; then
    echo "‚ùå Prometheus n'est pas accessible sur http://localhost:9090"
    echo "   Veuillez d√©marrer Prometheus avec: docker-compose -f monitoring/docker-compose-grafana-non-optimized.yml up -d"
    exit 1
fi

echo "‚úÖ Prometheus est accessible"
echo ""

# Importer le dashboard
echo "üì• Import du dashboard 'DevOps Project - Monitoring Final (Live Docker Metrics)'..."

# Cr√©er le dashboard via l'API Grafana
curl -X POST \
  -H "Content-Type: application/json" \
  -H "Authorization: Basic YWRtaW46YWRtaW4xMjM=" \
  -d @monitoring/grafana/dashboards/devops-containers-live-docker.json \
  http://localhost:3000/api/dashboards/db \
  > /dev/null 2>&1

if [ $? -eq 0 ]; then
    echo "‚úÖ Dashboard import√© avec succ√®s !"
else
    echo "‚ö†Ô∏è  Le dashboard existe peut-√™tre d√©j√†, tentative de mise √† jour..."
    
    # Essayer de mettre √† jour le dashboard existant
    curl -X PUT \
      -H "Content-Type: application/json" \
      -H "Authorization: Basic YWRtaW46YWRtaW4xMjM=" \
      -d @monitoring/grafana/dashboards/devops-containers-live-docker.json \
      http://localhost:3000/api/dashboards/db \
      > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Dashboard mis √† jour avec succ√®s !"
    else
        echo "‚ùå Erreur lors de l'import/mise √† jour du dashboard"
        exit 1
    fi
fi

echo ""
echo "üéØ Dashboard disponible dans Grafana:"
echo "   - Nom: 'DevOps Project - Monitoring Final (Live Docker Metrics)'"
echo "   - URL: http://localhost:3000/d/devops-containers-live-docker"
echo "   - Fonctionnalit√©s:"
echo "     ‚Ä¢ Connexion directe aux m√©triques Docker"
echo "     ‚Ä¢ Rafra√Æchissement automatique toutes les 2 secondes"
echo "     ‚Ä¢ M√©triques en temps r√©el qui √©voluent"
echo "     ‚Ä¢ Pas de valeurs statiques"
echo "     ‚Ä¢ Couleurs distinctes pour chaque conteneur"
echo "     ‚Ä¢ Graphiques CPU et Memory en temps r√©el"
echo ""

echo "üåê Ouverture de Grafana..."
sleep 2
open http://localhost:3000 2>/dev/null || xdg-open http://localhost:3000 2>/dev/null || echo "Veuillez ouvrir http://localhost:3000 dans votre navigateur"

echo ""
echo "‚úÖ Dashboard Live Docker Metrics import√© et ouvert !"
echo "   - Connexion directe aux m√©triques Docker"
echo "   - Rafra√Æchissement automatique toutes les 2 secondes"
echo "   - M√©triques qui √©voluent en temps r√©el"
echo "   - Pas de valeurs statiques"
echo "   - Graphiques avec couleurs distinctes pour chaque conteneur"
