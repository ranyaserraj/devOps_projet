pipeline {
    agent any

    environment {
        // URLs des services
        API_URL = 'http://localhost:5000'
        FRONTEND_URL = 'http://localhost:3000'
        TEST_DATABASE_URL = 'mongodb://localhost:27017/idurar_test'
        
        // Configuration des tests
        NODE_ENV = 'test'
        TEST_TIMEOUT = '30000'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üîç R√©cup√©ration du code...'
                checkout scm
            }
        }

        stage('Environment Setup') {
            steps {
                echo 'üîß Configuration de l\'environnement de test...'
                script {
                    // V√©rifier que les services sont disponibles
                    bat '''
                        echo "V√©rification des services..."
                        curl -f http://localhost:5000/health || echo "Backend non disponible"
                        curl -f http://localhost:3000 || echo "Frontend non disponible"
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installation des d√©pendances...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%"
                        if exist backend\\package.json (
                            cd backend
                            npm install
                        )
                        if exist frontend\\package.json (
                            cd ..\\frontend
                            npm install
                        )
                        if exist tests\\package.json (
                            cd ..\\tests
                            npm install
                        )
                    '''
                }
            }
        }

        stage('Backend Tests') {
            steps {
                echo 'üî• Tests backend...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm run test:baseline:backend
                    '''
                }
            }
        }

        stage('Frontend Tests') {
            steps {
                echo 'üé® Tests frontend...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm run test:baseline:frontend
                    '''
                }
            }
        }

        stage('Performance Tests') {
            steps {
                echo '‚ö° Tests de performance...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm run test:baseline:performance
                    '''
                }
            }
        }

        stage('Security Tests') {
            steps {
                echo 'üîí Tests de s√©curit√©...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm audit
                    '''
                }
            }
        }

        stage('Resource Monitoring') {
            steps {
                echo 'üìä Surveillance des ressources...'
                script {
                    bat '''
                        echo "=== RESSOURCES SYST√àME ==="
                        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}"
                        echo "=== M√âTRIQUES DE TEST ==="
                        echo "Tests baseline optimis√©s termin√©s avec succ√®s"
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'üßπ Nettoyage...'
            script {
                bat '''
                    echo "Nettoyage des fichiers temporaires..."
                    if exist "%WORKSPACE%\\temp" rmdir /s /q "%WORKSPACE%\\temp"
                '''
            }
        }

        success {
            echo '‚úÖ Tous les tests baseline ont r√©ussi !'
            script {
                bat '''
                    echo "=== R√âSULTATS ==="
                    echo "‚úÖ Tests backend: PASSED"
                    echo "‚úÖ Tests frontend: PASSED"
                    echo "‚úÖ Tests performance: PASSED"
                    echo "‚úÖ Tests s√©curit√©: PASSED"
                    echo "‚úÖ Monitoring ressources: OK"
                '''
            }
        }

        failure {
            echo '‚ùå Certains tests ont √©chou√© !'
            script {
                bat '''
                    echo "=== √âCHECS ==="
                    echo "‚ùå V√©rifiez les logs ci-dessus"
                    echo "‚ùå V√©rifiez que les services sont d√©marr√©s"
                '''
            }
        }

        unstable {
            echo '‚ö†Ô∏è Tests termin√©s avec des avertissements !'
        }
    }
}

