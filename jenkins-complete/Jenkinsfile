pipeline {
    agent any

    environment {
        // Test environment variables
        API_URL = 'http://localhost:5000'
        FRONTEND_URL = 'http://localhost:3000'
        TEST_DATABASE_URL = 'mongodb://localhost:27017/idurar_test'
        
        // Monitoring configuration
        PROMETHEUS_URL = 'http://prometheus:9090'
        GRAFANA_URL = 'http://grafana:3000'
        
        // Heavy testing configuration
        HEAVY_TEST_MODE = 'true'
        CONCURRENT_REQUESTS = '50'
        TEST_DURATION = '180000' // 3 minutes
        MEMORY_LIMIT = '1GB'
        CPU_LIMIT = '2'
    }

    stages {
        stage('Checkout') {
            steps {
                echo '🔍 Checking out code...'
                checkout scm
            }
        }

        stage('Environment Setup') {
            steps {
                echo '🔧 Setting up test environment...'
                script {
                    // Start application services
                    bat '''
                        cd /d "%WORKSPACE%"
                        docker-compose up -d
                        timeout /t 30 /nobreak
                    '''
                }
            }
        }

        stage('Start Monitoring') {
            steps {
                echo '📊 Starting monitoring stack...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\jenkins-complete"
                        docker-compose up -d
                        timeout /t 20 /nobreak
                    '''
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                echo '📦 Installing test dependencies...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm install
                    '''
                }
            }
        }

        stage('Backend API Tests') {
            steps {
                echo '🔥 Running backend API tests with monitoring...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm run test:baseline:backend
                    '''
                }
            }
        }

        stage('Frontend UI Tests') {
            steps {
                echo '🎨 Running frontend UI tests with monitoring...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm run test:baseline:frontend
                    '''
                }
            }
        }

        stage('Performance Tests') {
            steps {
                echo '⚡ Running performance tests with monitoring...'
                script {
                    bat '''
                        cd /d "%WORKSPACE%\\tests"
                        npm run test:baseline:performance
                    '''
                }
            }
        }

        stage('Collect Metrics') {
            steps {
                echo '📈 Collecting metrics from Prometheus...'
                script {
                    bat '''
                        echo "Collecting metrics from Prometheus..."
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=up" > metrics-status.json
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=node_cpu_seconds_total" > metrics-cpu.json
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=node_memory_MemTotal_bytes" > metrics-memory.json
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=container_cpu_usage_seconds_total" > metrics-containers.json
                    '''
                }
            }
        }

        stage('Resource Monitoring') {
            steps {
                echo '📊 Monitoring resource consumption...'
                script {
                    bat '''
                        echo "=== RESOURCE USAGE DURING TESTS ===" > resource-usage.txt
                        echo "Timestamp: %DATE% %TIME%" >> resource-usage.txt
                        echo "" >> resource-usage.txt
                        
                        echo "=== DOCKER CONTAINERS ===" >> resource-usage.txt
                        docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.NetIO}}\t{{.BlockIO}}" >> resource-usage.txt
                        echo "" >> resource-usage.txt
                        
                        echo "=== PROMETHEUS METRICS ===" >> resource-usage.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=up" >> resource-usage.txt
                        echo "" >> resource-usage.txt
                        
                        echo "=== CPU USAGE ===" >> resource-usage.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)" >> resource-usage.txt
                        echo "" >> resource-usage.txt
                        
                        echo "=== MEMORY USAGE ===" >> resource-usage.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100" >> resource-usage.txt
                        echo "" >> resource-usage.txt
                        
                        echo "=== DISK USAGE ===" >> resource-usage.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=(node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100" >> resource-usage.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'resource-usage.txt', fingerprint: true
                    archiveArtifacts artifacts: 'metrics-*.json', fingerprint: true
                }
            }
        }

        stage('Generate Report') {
            steps {
                echo '📋 Generating monitoring report...'
                script {
                    bat '''
                        echo "=== IDURAR ERP CRM - MONITORING REPORT ===" > monitoring-report.txt
                        echo "Generated: %DATE% %TIME%" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "=== SERVICES STATUS ===" >> monitoring-report.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=up" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "=== RESOURCE CONSUMPTION ===" >> monitoring-report.txt
                        echo "CPU Usage:" >> monitoring-report.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100)" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "Memory Usage:" >> monitoring-report.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=(node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes) / node_memory_MemTotal_bytes * 100" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "Disk Usage:" >> monitoring-report.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=(node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes * 100" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "=== CONTAINER METRICS ===" >> monitoring-report.txt
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=container_cpu_usage_seconds_total" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        curl -s "%PROMETHEUS_URL%/api/v1/query?query=container_memory_usage_bytes" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "=== TEST RESULTS ===" >> monitoring-report.txt
                        echo "Backend API Tests: PASSED" >> monitoring-report.txt
                        echo "Frontend UI Tests: PASSED" >> monitoring-report.txt
                        echo "Performance Tests: PASSED" >> monitoring-report.txt
                        echo "" >> monitoring-report.txt
                        
                        echo "=== MONITORING DASHBOARDS ===" >> monitoring-report.txt
                        echo "Grafana: http://localhost:3001" >> monitoring-report.txt
                        echo "Prometheus: http://localhost:9090" >> monitoring-report.txt
                        echo "Jenkins: http://localhost:8080" >> monitoring-report.txt
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'monitoring-report.txt', fingerprint: true
                }
            }
        }
    }

    post {
        always {
            echo '🧹 Cleaning up test environment...'
            script {
                bat '''
                    cd /d "%WORKSPACE%"
                    docker-compose down
                    cd /d "%WORKSPACE%\\jenkins-complete"
                    docker-compose down
                    docker system prune -f
                '''
            }
        }

        success {
            echo '✅ All tests completed successfully with monitoring!'
            script {
                bat '''
                    echo "IDURAR ERP CRM - Pipeline with Monitoring PASSED"
                    echo "Check Grafana dashboards for detailed metrics"
                '''
            }
        }

        failure {
            echo '❌ Tests failed with monitoring data available!'
            script {
                bat '''
                    echo "IDURAR ERP CRM - Pipeline with Monitoring FAILED"
                    echo "Check monitoring-report.txt for details"
                '''
            }
        }

        unstable {
            echo '⚠️ Tests completed with warnings and monitoring data!'
        }
    }
}








