#!/bin/bash

echo "üöÄ LANCEMENT GRAFANA - Version Non-Optimis√©e"
echo "==========================================="
echo ""

# Fonction pour v√©rifier les pr√©requis
check_prerequisites() {
    echo "üîç V√©rification des pr√©requis..."
    
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker n'est pas install√©"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose n'est pas install√©"
        exit 1
    fi
    
    echo "‚úÖ Pr√©requis OK"
    echo ""
}

# Fonction pour cr√©er le r√©seau
create_network() {
    echo "üåê Cr√©ation du r√©seau..."
    docker network create idurar-network 2>/dev/null || echo "R√©seau idurar-network existant"
    docker network create monitoring-network 2>/dev/null || echo "R√©seau monitoring-network existant"
    echo "‚úÖ R√©seaux cr√©√©s"
    echo ""
}

# Fonction pour d√©marrer l'app non-optimis√©e
start_non_optimized_app() {
    echo "üöÄ D√©marrage de l'app non-optimis√©e..."
    docker-compose up -d
    
    echo "‚è≥ Attente du d√©marrage (45s)..."
    sleep 45
    
    echo "üìä √âtat des conteneurs:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep idurar
    echo ""
}

# Fonction pour d√©marrer Grafana
start_grafana() {
    echo "üìä D√©marrage de Grafana..."
    docker-compose -f monitoring/docker-compose-grafana-non-optimized.yml up -d
    
    echo "‚è≥ Attente de Grafana (30s)..."
    sleep 30
    
    echo "üìä Services de monitoring:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(grafana|prometheus|cadvisor)"
    echo ""
}

# Fonction pour importer le dashboard
import_dashboard() {
    echo "üìà Import du dashboard..."
    
    # Attendre que Grafana soit pr√™t
    echo "‚è≥ Attente de Grafana (20s)..."
    sleep 20
    
    # Importer le dashboard
    curl -X POST -H "Content-Type: application/json" \
         -u "admin:admin123" \
         -d @monitoring/grafana/dashboards/non-optimized-complete.json \
         http://localhost:3000/api/dashboards/db 2>/dev/null
    
    echo "‚úÖ Dashboard import√©"
    echo ""
}

# Fonction pour afficher les URLs
show_urls() {
    echo "üåê URLs D'ACC√àS"
    echo "==============="
    echo ""
    echo "üì± Application Non-Optimis√©e:"
    echo "   Frontend: http://localhost:3000"
    echo "   Backend:  http://localhost:5000"
    echo "   MongoDB:  localhost:27017"
    echo "   Portainer: http://localhost:9000"
    echo ""
    echo "üìä Monitoring:"
    echo "   Grafana: http://localhost:3000 (admin/admin123)"
    echo "   Prometheus: http://localhost:9090"
    echo "   cAdvisor: http://localhost:8080"
    echo ""
    echo "üéØ Dashboard: 'DevOps Project - Version Non-Optimis√©e (Complet)'"
    echo ""
}

# Fonction pour afficher les m√©triques
show_metrics() {
    echo "üìä M√âTRIQUES ACTUELLES"
    echo "====================="
    echo ""
    
    echo "üì¶ Conteneurs:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep idurar
    
    echo ""
    echo "üìà CPU Usage:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}" | grep idurar
    
    echo ""
    echo "üíæ Memory Usage:"
    docker stats --no-stream --format "table {{.Container}}\t{{.MemUsage}}\t{{.MemPerc}}" | grep idurar
    
    echo ""
    echo "üìè Taille des images:"
    docker images | grep -E "(idurar|mongo|portainer)" | head -5
    echo ""
}

# Fonction pour monitoring continu
continuous_monitoring() {
    echo "üîÑ MONITORING CONTINU (Ctrl+C pour arr√™ter)"
    echo "==========================================="
    echo ""
    
    while true; do
        clear
        echo "üìä MONITORING VERSION NON-OPTIMIS√âE - $(date)"
        echo "=============================================="
        show_metrics
        
        echo "‚è≥ Prochaine mise √† jour dans 10s..."
        sleep 10
    done
}

# Fonction pour nettoyer
cleanup() {
    echo "üßπ Nettoyage..."
    docker-compose down 2>/dev/null
    docker-compose -f monitoring/docker-compose-grafana-non-optimized.yml down 2>/dev/null
    echo "‚úÖ Nettoyage termin√©"
}

# Menu principal
echo "üéØ CHOISISSEZ UNE OPTION:"
echo "1. Configuration compl√®te (app + Grafana)"
echo "2. D√©marrer seulement l'app non-optimis√©e"
echo "3. D√©marrer seulement Grafana"
echo "4. Afficher les m√©triques"
echo "5. Monitoring continu"
echo "6. Afficher les URLs"
echo "7. Nettoyer et arr√™ter"
echo "8. Quitter"
echo ""

read -p "Votre choix (1-8): " choice

case $choice in
    1)
        check_prerequisites
        create_network
        start_non_optimized_app
        start_grafana
        import_dashboard
        show_urls
        show_metrics
        echo "‚úÖ Configuration compl√®te termin√©e !"
        ;;
    2)
        check_prerequisites
        create_network
        start_non_optimized_app
        show_metrics
        ;;
    3)
        check_prerequisites
        create_network
        start_grafana
        import_dashboard
        show_urls
        ;;
    4)
        show_metrics
        ;;
    5)
        continuous_monitoring
        ;;
    6)
        show_urls
        ;;
    7)
        cleanup
        ;;
    8)
        echo "üëã Au revoir!"
        exit 0
        ;;
    *)
        echo "‚ùå Choix invalide"
        exit 1
        ;;
esac

echo "‚úÖ Op√©ration termin√©e!"
