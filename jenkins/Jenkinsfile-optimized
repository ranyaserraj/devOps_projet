pipeline {
    agent any
    options {
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
        parallelsAlwaysFailFast()
    }
    environment {
        NODE_VERSION = '20'
        BACKEND_HOST = 'host.docker.internal'
        FRONTEND_HOST = 'host.docker.internal'
        MAX_CONCURRENCY = '8'
        OPTIMIZATION_MODE = 'true'
        SECURITY_AUDIT = 'true'
        ENERGY_MONITORING_URL = 'http://localhost:9091'
        BUILD_ID = "${BUILD_NUMBER}"
        JOB_NAME = "${JOB_NAME}"
    }
    stages {
        stage('Start Energy Monitoring') {
            steps {
                echo 'üîã Starting energy monitoring for optimized build...'
                script {
                    try {
                        def response = sh(script: """
                            curl -X POST ${ENERGY_MONITORING_URL}/start-monitoring \\
                                -H "Content-Type: application/json" \\
                                -d '{"buildId": "${BUILD_ID}", "jobName": "${JOB_NAME}", "buildType": "optimized"}' \\
                                --connect-timeout 10 --max-time 30
                        """, returnStdout: true)
                        echo "‚úÖ Energy monitoring started: ${response}"
                        env.ENERGY_MONITORING_STARTED = "true"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Failed to start energy monitoring: ${e.getMessage()}"
                        env.ENERGY_MONITORING_STARTED = "false"
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo 'üì• Checking out code from GitHub...'
                git branch: 'optimization_test', url: 'https://github.com/ranyaserraj/devOps_projet.git'
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo 'üîß Setting up optimized environment with Node.js 20...'
                sh '''
                    # Check if Node.js is already installed
                    if ! command -v node &> /dev/null; then
                        echo "Installing Node.js 20..."
                        curl -fsSL https://nodejs.org/dist/v20.18.1/node-v20.18.1-linux-x64.tar.gz -o node.tar.gz
                        tar -xzf node.tar.gz
                        export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                        echo "Node.js installed successfully"
                    else
                        echo "Node.js already installed"
                    fi
                    
                    # Verify installation
                    node --version
                    npm --version
                    
                    # Install additional optimization packages
                    npm install -g pm2
                    npm install -g cluster
                '''
            }
        }
        
        stage('Start Application Services') {
            steps {
                echo 'üöÄ Starting backend and frontend services in parallel...'
                sh '''
                    export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                    
                    # Check if Docker services are running
                    echo "Checking Docker services..."
                    docker ps || echo "Docker not available, will try direct startup"
                    
                    # Start backend service (parallel)
                    echo "Starting backend service..."
                    (cd backend && npm install --production --prefer-offline 2>&1 | tail -10 && nohup npm start > ../backend.log 2>&1 & echo $! > ../backend.pid) &
                    BACKEND_START_PID=$!
                    
                    # Start frontend service (parallel)
                    echo "Starting frontend service..."
                    (cd frontend && npm install --production --prefer-offline 2>&1 | tail -10 && nohup npm run dev > ../frontend.log 2>&1 & echo $! > ../frontend.pid) &
                    FRONTEND_START_PID=$!
                    
                    # Wait for both installations to complete
                    wait $BACKEND_START_PID
                    wait $FRONTEND_START_PID
                    
                    # Wait for services to initialize
                    echo "Waiting for services to initialize (40 seconds)..."
                    sleep 40
                    
                    echo "‚úÖ Services startup completed"
                '''
            }
        }
        
        stage('Network Connectivity Check') {
            steps {
                echo 'üåê Verifying service connectivity...'
                script {
                    sh '''
                        export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                        
                        echo "Testing connectivity to backend..."
                        BACKEND_FOUND=0
                        for host in "localhost" "127.0.0.1" "host.docker.internal" "172.17.0.1"; do
                            echo "Testing $host:5000..."
                            if curl -s --connect-timeout 10 --max-time 15 "$host:5000" > /dev/null 2>&1; then
                                echo "‚úÖ Backend accessible via $host:5000"
                                echo "$host" > backend_host.txt
                                BACKEND_FOUND=1
                                break
                            else
                                echo "‚ùå Backend not accessible via $host:5000"
                            fi
                        done
                        
                        echo "Testing connectivity to frontend..."
                        FRONTEND_FOUND=0
                        for host in "localhost" "127.0.0.1" "host.docker.internal" "172.17.0.1"; do
                            echo "Testing $host:3000..."
                            if curl -s --connect-timeout 10 --max-time 15 "$host:3000" > /dev/null 2>&1; then
                                echo "‚úÖ Frontend accessible via $host:3000"
                                echo "$host" > frontend_host.txt
                                FRONTEND_FOUND=1
                                break
                            else
                                echo "‚ùå Frontend not accessible via $host:3000"
                            fi
                        done
                        
                        # Check service logs if not found
                        if [ $BACKEND_FOUND -eq 0 ]; then
                            echo "‚ö†Ô∏è Backend not accessible, checking logs..."
                            tail -30 backend.log || echo "No backend logs available"
                        fi
                        
                        if [ $FRONTEND_FOUND -eq 0 ]; then
                            echo "‚ö†Ô∏è Frontend not accessible, checking logs..."
                            tail -30 frontend.log || echo "No frontend logs available"
                        fi
                        
                        # Set default hosts
                        echo "localhost" > backend_host.txt
                        echo "localhost" > frontend_host.txt
                    '''
                    
                    def backendHost = sh(script: 'cat backend_host.txt 2>/dev/null || echo "localhost"', returnStdout: true).trim()
                    def frontendHost = sh(script: 'cat frontend_host.txt 2>/dev/null || echo "localhost"', returnStdout: true).trim()
                    
                    env.BACKEND_HOST = backendHost
                    env.FRONTEND_HOST = frontendHost
                    
                    echo "üåê Using hosts: Backend=$backendHost, Frontend=$frontendHost"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'üì¶ Installing optimized test dependencies...'
                sh '''
                    export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                    cd tests
                    
                    # Install dependencies with optimization flags
                    npm install --production=false --no-optional --prefer-offline
                    
                    # Fix security vulnerabilities
                    echo "üîí Running security audit and fixing vulnerabilities..."
                    npm audit fix --force || echo "Some vulnerabilities may require manual review"
                    
                    # Verify installation
                    npm list --depth=0
                    
                    # Show security status
                    echo "üîç Security audit results:"
                    npm audit --audit-level=high || echo "Audit completed with warnings"
                '''
            }
        }
        
        // Parallel execution of different test categories
        stage('Parallel Test Execution') {
            parallel {
                stage('Critical Tests') {
                    steps {
                        echo ' Running Critical Tests in parallel...'
                        sh '''
                            export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                            cd tests
                            
                            echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                            export API_URL="http://${BACKEND_HOST}:5000"
                            export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                            
                            # Run critical tests with high priority
                            echo "Running Backend API Tests..."
                            node backend-baseline-robust-fixed.test.js &
                            BACKEND_PID=$!
                            
                            echo "Running Frontend Tests..."
                            node frontend-simple-fixed.test.js &
                            FRONTEND_PID=$!
                            
                            # Wait for critical tests to complete
                            wait $BACKEND_PID
                            wait $FRONTEND_PID
                            
                            echo "‚úÖ Critical tests completed"
                        '''
                    }
                }
                
                stage('Performance Tests') {
                    steps {
                        echo '‚ö° Running Performance Tests in parallel...'
                        sh '''
                            export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                            cd tests
                            
                            echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                            export API_URL="http://${BACKEND_HOST}:5000"
                            export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                            
                            # Run performance tests in parallel
                            echo "Running Performance Baseline Tests..."
                            node performance-baseline-robust.test.js &
                            PERF_BASELINE_PID=$!
                            
                            echo "Running Heavy Performance Tests..."
                            node performance-heavy-baseline.test.js &
                            PERF_HEAVY_PID=$!
                            
                            # Wait for performance tests to complete
                            wait $PERF_BASELINE_PID
                            wait $PERF_HEAVY_PID
                            
                            echo "‚úÖ Performance tests completed"
                        '''
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        echo 'üîó Running Integration Tests in parallel...'
                        sh '''
                            export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                            cd tests
                            
                            echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                            export API_URL="http://${BACKEND_HOST}:5000"
                            export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                            
                            # Run integration tests
                            echo "Running Integration Tests..."
                            node integration-baseline.test.js &
                            INTEGRATION_PID=$!
                            
                            # Wait for integration tests to complete
                            wait $INTEGRATION_PID
                            
                            echo "‚úÖ Integration tests completed"
                        '''
                    }
                }
                
                stage('Unit Tests') {
                    steps {
                        echo 'üß™ Running Unit Tests in parallel...'
                        sh '''
                            export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                            cd tests
                            
                            # Run unit tests (no network required)
                            echo "Running Unit Tests..."
                            node unit-baseline-fixed.test.js &
                            UNIT_PID=$!
                            
                            # Wait for unit tests to complete
                            wait $UNIT_PID
                            
                            echo "‚úÖ Unit tests completed"
                        '''
                    }
                }
            }
        }
        
        stage('Optimized Parallel Tests') {
            steps {
                echo 'üöÄ Running Optimized Parallel Tests...'
                sh '''
                    export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                    cd tests
                    
                    echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                    export API_URL="http://${BACKEND_HOST}:5000"
                    export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                    export MAX_CONCURRENCY="${MAX_CONCURRENCY}"
                    export OPTIMIZATION_MODE="${OPTIMIZATION_MODE}"
                    
                    # Run optimized parallel tests
                    echo "Running Parallel Performance Tests..."
                    node parallel-performance-optimized.test.js &
                    PARALLEL_PERF_PID=$!
                    
                    echo "Running Parallel Integration Tests..."
                    node parallel-integration-optimized.test.js &
                    PARALLEL_INT_PID=$!
                    
                    echo "Running Parallel Unit Tests..."
                    node parallel-unit-optimized.test.js &
                    PARALLEL_UNIT_PID=$!
                    
                    # Wait for all optimized tests to complete
                    wait $PARALLEL_PERF_PID
                    wait $PARALLEL_INT_PID
                    wait $PARALLEL_UNIT_PID
                    
                    echo "‚úÖ Optimized parallel tests completed"
                '''
            }
        }
        
        stage('Complete Test Suite') {
            steps {
                echo 'üéØ Running Complete Optimized Test Suite...'
                sh '''
                    export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                    cd tests
                    
                    echo "Using detected hosts: Backend=${BACKEND_HOST}, Frontend=${FRONTEND_HOST}"
                    export API_URL="http://${BACKEND_HOST}:5000"
                    export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                    export MAX_CONCURRENCY="${MAX_CONCURRENCY}"
                    export OPTIMIZATION_MODE="${OPTIMIZATION_MODE}"
                    
                    # Run complete optimized test suite
                    echo "Running Complete Optimized Test Suite..."
                    node parallel-test-runner-optimized.js
                '''
            }
        }
        
        stage('Performance Analysis') {
            steps {
                echo 'üìä Analyzing Test Performance...'
                sh '''
                    export PATH=$PWD/node-v20.18.1-linux-x64/bin:$PATH
                    cd tests
                    
                    echo "Generating performance report..."
                    echo "Test execution completed at: $(date)"
                    echo "System resources:"
                    echo "CPU cores: $(nproc)"
                    echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
                    echo "Disk space: $(df -h . | tail -1 | awk '{print $4}')"
                    
                    # Generate optimization metrics
                    echo "Optimization metrics:"
                    echo "- Parallel execution: ${MAX_CONCURRENCY} concurrent tests"
                    echo "- Optimization mode: ${OPTIMIZATION_MODE}"
                    echo "- Network optimization: Connection pooling enabled"
                    echo "- Memory optimization: Advanced caching enabled"
                '''
            }
        }
        
    }
    
    post {
        always {
            echo 'üìä Optimized test execution completed!'
            
            // Cleanup services first
            sh '''
                echo "üßπ Cleaning up services..."
                
                # Stop backend service
                if [ -f backend.pid ]; then
                    BACKEND_PID=$(cat backend.pid)
                    kill $BACKEND_PID 2>/dev/null || echo "Backend service already stopped"
                    rm -f backend.pid
                fi
                
                # Stop frontend service
                if [ -f frontend.pid ]; then
                    FRONTEND_PID=$(cat frontend.pid)
                    kill $FRONTEND_PID 2>/dev/null || echo "Frontend service already stopped"
                    rm -f frontend.pid
                fi
                
                # Clean up temporary files
                rm -f backend.log frontend.log backend_host.txt frontend_host.txt
                
                echo "‚úÖ Cleanup completed"
            '''
            
            script {
                def currentBuild = currentBuild
                def duration = currentBuild.durationString
                echo "Total execution time: ${duration}"
                
                // Stop energy monitoring
                if (env.ENERGY_MONITORING_STARTED == "true") {
                    try {
                        def buildKey = "${JOB_NAME}-${BUILD_ID}"
                        def status = currentBuild.result ?: 'completed'
                        
                        def response = sh(script: """
                            curl -X POST ${ENERGY_MONITORING_URL}/stop-monitoring \\
                                -H "Content-Type: application/json" \\
                                -d '{"buildKey": "${buildKey}", "status": "${status}"}' \\
                                --connect-timeout 10 --max-time 30
                        """, returnStdout: true)
                        echo "üîã Energy monitoring stopped: ${response}"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Failed to stop energy monitoring: ${e.getMessage()}"
                    }
                }
            }
        }
        success {
            echo '‚úÖ All optimized tests passed successfully!'
            echo 'üöÄ Performance optimizations applied:'
            echo '  - Parallel execution with ${MAX_CONCURRENCY} workers'
            echo '  - Advanced caching and memoization'
            echo '  - Connection pooling and keep-alive'
            echo '  - Resource-efficient algorithms'
            echo 'üå± CO‚ÇÇ optimization achieved through reduced execution time'
        }
        failure {
            echo '‚ùå Some optimized tests failed!'
            echo 'üîß Check logs for optimization issues'
        }
        unstable {
            echo '‚ö†Ô∏è Some tests were unstable but completed!'
            echo 'üîß Review optimization settings'
        }
    }
}
