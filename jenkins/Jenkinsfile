pipeline {
    agent any
    
    options {
        timeout(time: 15, unit: 'MINUTES')
        timestamps()
    }
    
    environment {
        NODE_VERSION = '18'
        BACKEND_URL = 'http://host.docker.internal:5000'
        FRONTEND_URL = 'http://host.docker.internal:3000'
        ENERGY_MONITORING_URL = 'http://localhost:9091'
        BUILD_ID = "${BUILD_NUMBER}"
        JOB_NAME = "${JOB_NAME}"
    }
    
    stages {
        stage('Start Energy Monitoring') {
            steps {
                echo '🔋 Starting energy monitoring for this build...'
                script {
                    try {
                        def response = sh(script: """
                            curl -X POST ${ENERGY_MONITORING_URL}/start-monitoring \\
                                -H "Content-Type: application/json" \\
                                -d '{"buildId": "${BUILD_ID}", "jobName": "${JOB_NAME}", "buildType": "standard"}' \\
                                --connect-timeout 10 --max-time 30
                        """, returnStdout: true)
                        echo "✅ Energy monitoring started: ${response}"
                        env.ENERGY_MONITORING_STARTED = "true"
                    } catch (Exception e) {
                        echo "⚠️ Failed to start energy monitoring: ${e.getMessage()}"
                        env.ENERGY_MONITORING_STARTED = "false"
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                echo '📥 Checking out code from GitHub...'
                git branch: 'master', url: 'https://github.com/ranyaserraj/devOps_projet.git'
            }
        }
        
        stage('Setup Environment') {
            steps {
                echo '🔧 Setting up environment with Node.js 18...'
                sh '''
                    # Check if Node.js is already installed
                    if ! command -v node &> /dev/null; then
                        echo "Installing Node.js 18..."
                        # Download and install Node.js 18
                        curl -fsSL https://nodejs.org/dist/v18.19.0/node-v18.19.0-linux-x64.tar.gz -o node.tar.gz
                        tar -xzf node.tar.gz
                        export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                        echo "Node.js installed successfully"
                    else
                        echo "Node.js already installed"
                    fi
                    
                    # Verify installation
                    node --version
                    npm --version
                '''
            }
        }
        
        stage('Network Connectivity Check') {
            steps {
                echo '🌐 Checking network connectivity to services...'
                script {
                    // Set up Node.js path
                    sh '''
                        export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                        
                        echo "Testing connectivity to backend..."
                        # Try different hostnames
                        for host in "host.docker.internal" "localhost" "172.17.0.1" "host-gateway"; do
                            echo "Testing $host:5000..."
                            if curl -s --connect-timeout 5 "$host:5000" > /dev/null 2>&1; then
                                echo "✅ Backend accessible via $host:5000"
                                echo "$host" > backend_host.txt
                                break
                            else
                                echo "❌ Backend not accessible via $host:5000"
                            fi
                        done
                        
                        echo "Testing connectivity to frontend..."
                        for host in "host.docker.internal" "localhost" "172.17.0.1" "host-gateway"; do
                            echo "Testing $host:3000..."
                            if curl -s --connect-timeout 5 "$host:3000" > /dev/null 2>&1; then
                                echo "✅ Frontend accessible via $host:3000"
                                echo "$host" > frontend_host.txt
                                break
                            else
                                echo "❌ Frontend not accessible via $host:3000"
                            fi
                        done
                        
                        # Show network info
                        echo "Network configuration:"
                        echo "Hostname: $(hostname)"
                        echo "Available network interfaces:"
                        ifconfig 2>/dev/null || echo "ifconfig not available"
                        echo "Hosts file:"
                        cat /etc/hosts
                    '''
                    
                    // Read the detected hosts
                    def backendHost = sh(script: 'cat backend_host.txt 2>/dev/null || echo "localhost"', returnStdout: true).trim()
                    def frontendHost = sh(script: 'cat frontend_host.txt 2>/dev/null || echo "localhost"', returnStdout: true).trim()
                    
                    // Set environment variables for subsequent stages
                    env.BACKEND_HOST = backendHost
                    env.FRONTEND_HOST = frontendHost
                    
                    echo "🌐 Detected hosts: Backend=$backendHost, Frontend=$frontendHost"
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo '📦 Installing dependencies...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    npm install
                '''
            }
        }
        
        stage('Backend Tests') {
            steps {
                echo '🧪 Running Backend API Tests...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Use detected backend host with robust test
                    echo "Using backend host: ${BACKEND_HOST}"
                    export API_URL="http://${BACKEND_HOST}:5000"
                    node backend-baseline-robust.test.js
                '''
            }
        }
        
        stage('Frontend Tests') {
            steps {
                echo '🎨 Running Frontend Tests...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Use detected frontend host
                    echo "Using frontend host: ${FRONTEND_HOST}"
                    # Create a modified test file
                    sed "s/localhost:3000/${FRONTEND_HOST}:3000/g" frontend-simple.test.js > frontend-modified.test.js
                    node frontend-modified.test.js
                '''
            }
        }
        
        stage('Performance Tests') {
            steps {
                echo '⚡ Running Performance Tests...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Use detected hosts with robust test
                    echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                    export API_URL="http://${BACKEND_HOST}:5000"
                    export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                    node performance-baseline-robust.test.js
                '''
            }
        }
        
        stage('Heavy Performance Tests') {
            steps {
                echo '🔥 Running Heavy Performance Tests...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Use detected hosts with heavy performance test
                    echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                    export API_URL="http://${BACKEND_HOST}:5000"
                    export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                    node performance-heavy-baseline.test.js
                '''
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo '🔗 Running Integration Tests...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Use detected hosts with integration test
                    echo "Using backend host: ${BACKEND_HOST}, frontend host: ${FRONTEND_HOST}"
                    export API_URL="http://${BACKEND_HOST}:5000"
                    export FRONTEND_URL="http://${FRONTEND_HOST}:3000"
                    node integration-baseline.test.js
                '''
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo '🧪 Running Unit Tests...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Run unit tests (no network required)
                    node unit-baseline.test.js
                '''
            }
        }
        
        stage('Full Test Suite') {
            steps {
                echo '🚀 Running Complete Test Suite...'
                sh '''
                    # Set up Node.js path
                    export PATH=$PWD/node-v18.19.0-linux-x64/bin:$PATH
                    cd tests
                    
                    # Use enhanced test-runner with environment variables
                    echo "Using detected hosts: Backend=${BACKEND_HOST}, Frontend=${FRONTEND_HOST}"
                    
                    # Set environment variables for all tests
                    export BACKEND_HOST="${BACKEND_HOST}"
                    export FRONTEND_HOST="${FRONTEND_HOST}"
                    
                    # Run enhanced test-runner
                    node test-runner-improved.js
                '''
            }
        }
    }
    
    post {
        always {
            echo '📊 Test execution completed!'
            
            // Stop energy monitoring
            script {
                if (env.ENERGY_MONITORING_STARTED == "true") {
                    try {
                        def buildKey = "${JOB_NAME}-${BUILD_ID}"
                        def status = currentBuild.result ?: 'completed'
                        
                        def response = sh(script: """
                            curl -X POST ${ENERGY_MONITORING_URL}/stop-monitoring \\
                                -H "Content-Type: application/json" \\
                                -d '{"buildKey": "${buildKey}", "status": "${status}"}' \\
                                --connect-timeout 10 --max-time 30
                        """, returnStdout: true)
                        echo "🔋 Energy monitoring stopped: ${response}"
                    } catch (Exception e) {
                        echo "⚠️ Failed to stop energy monitoring: ${e.getMessage()}"
                    }
                }
            }
        }
        success {
            echo '✅ All tests passed successfully!'
        }
        failure {
            echo '❌ Some tests failed!'
        }
    }
}
